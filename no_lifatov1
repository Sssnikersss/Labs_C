#define _CRT_SECURE_NO_WARNINGS
#include <malloc.h>
#include <stdio.h>
#include <locale.h>
#include <string.h>

struct sotrudnik
{
	char cod[20];
	char dolgnost[30];
	int startvremy_chas;
	int startvremy_min;
	int finvremy_chas;
	int finvremy_min;
	float prodolg;
	int t2;
};

typedef struct sotrudnik data;

void Add(data* ptr_struct, int A);//Ввод базы данных
void Poisk1(data* ptr_struct, int A, float Kol);//Поиск структуры по работавшим менее заданного количества часов в день
void Poisk2(data* ptr_struct, int A, int Ch1, int Min1, int Ch2, int Min2);//Поиск структуры по работавшим в заданном интервале времени
void Sort1(data* ptr_struct, int A);//Сортировка по продолжительности работы за первую половину дня
void Sort2(data* ptr_struct, int A);
int writefile(data* ptr_struct, int size, char* fileName);//Запись в файл
int readfile(data* ptr_struct, int size, char* fileName);//Чтение из файла
void Print(data* ptr_struct, int A);//Печать базы данных
void print_one_persone(data* ptr_struct, int i);
int second_part_time(data* ptr_struct, int i);


int main() //НАЧАЛО ОСНОВНОЙ ФУНКЦИИ***************************************************************************************************************
{
	
	setlocale(LC_ALL, "RUS");//устанавливаем русскую раскладку
	system("cls");
	char* fileName = "sotrudnik.txt";
    
    int size;
	printf("Введите количество сотрудников: ");
	scanf("%d", &size);
	data* ptr_struct = (data*)malloc(size * sizeof(data));
    
	int poisk, sort, menu;

	int cycle = 1; //постоянная для создания цикла
	while (cycle == 1)//меню базы данных
	{
		printf("\t  Меню.\n");
		printf("0. Выход из программы.\n");
		printf("1. Ввод базы данных.\n");
		printf("2. Печать базы данных.\n");
		printf("3. Поиск структуры по критерию.\n");
		printf("4. Сортировка по критерию.\n");
		printf("5. Добавить данные в файл.\n");
		printf("6. Прочесть данные из файла.\n\n");
		printf("Введите номер пункта меню: ");
		scanf("%d", &menu);
		printf("\n");

		switch (menu)
		{
		case 0:
			break;
		case 1://Ввод базы данных

			Add(ptr_struct, size);
			break;
		case 2://Печать базы данных
			Print(ptr_struct, size);
			break;
		case 3://Поиск структуры по критерию
			printf("По какому критерию вы хотите осуществить поиск: \n");
			printf("(1) - Работавшие менее заданного количества часов в день.\n");
			printf("(2) - Работавшие в заданном интервале времени.\n");
			scanf("%d", &poisk);
			if (poisk == 1) {
				float mch;
				printf("Введите количество часов: ");
				scanf("%f", &mch);
				printf("\n");
				Poisk1(ptr_struct, size, mch);
			}
			else if (poisk == 2) {
				int zadch1, zadmin1, zadch2, zadmin2;
				printf("Введите начало работы - часы и минуты (два числа через пробел): ");
				scanf("%d %d", &zadch1, &zadmin1);
				printf("Введите окончание работы - часы и минуты (два числа через пробел): ");
				scanf("%d %d", &zadch2, &zadmin2);
				printf("\n");
				Poisk2(ptr_struct, size, zadch1, zadmin1, zadch2, zadmin2);
			}
			else
				printf("Неизвестная команда\n");
			break;
		case 4://Сортировка
			printf("По какому критерию вы хотите осуществить сортировку: \n");
			printf("(1) - Продолжительность работы за первую половину дня.\n");
			printf("(2) - Продолжительность работы за вторую половину дня.\n");
			scanf("%d", &sort);
			if (sort == 1) {
				Sort1(ptr_struct, size);
				Print(ptr_struct, size);
			}
			else if (sort == 2) {
				Sort2(ptr_struct, size);
				Print(ptr_struct, size);
			}
			else
				printf("Неизвестная команда\n");
			break;
		case 5://Добавление данных в файл
			writefile(ptr_struct, size, fileName);
			break;
		case 6://Чтение данных из файла
			readfile(ptr_struct, size, fileName);
			break;
		default:
			printf("Неизвестная команда\n");
			break;
		}

		printf("Продолжить работу?(1 - да, 2 - нет): ");
		scanf("%d", &cycle);
		printf("\n");

	}

	free(ptr_struct);
	system("pause");
	return 0;
}//КОНЕЦ ОСНОВНОЙ ФУНКЦИИ**************************************************************************************************************************

void Add(data* ptr_struct, int A)//Ввод базы данных
{
    int s1, s2, e1, e2;
	for (int i = 0; i < A; i++)
	{
		printf("Введите код сотрудника: ");
		scanf("%s", &ptr_struct[i].cod);
		printf("Введите должность сотрудника: ");
		scanf("%s", &ptr_struct[i].dolgnost);
		printf("Введите время начала работы - часы и минуты (два числа через пробел): ");
		scanf("%02d %02d", &ptr_struct[i].startvremy_chas, &ptr_struct[i].startvremy_min);
		printf("Введите время окончания работы - часы и минуты (два числа через пробел): ");
		scanf("%02d %02d", &ptr_struct[i].finvremy_chas, &ptr_struct[i].finvremy_min);
		printf("\n");
		
		
		s2 = ptr_struct[i].startvremy_chas * 60 <= 720 ? 720 : ptr_struct[i].startvremy_chas * 60 + ptr_struct[i].startvremy_min;
		e2 = ptr_struct[i].finvremy_chas * 60 > 720 ? ptr_struct[i].finvremy_chas * 60 + ptr_struct[i].finvremy_min : 1440;
		ptr_struct[i].t2 = e2 - s2;
	}
}

void Print(data* ptr_struct, int A)//Печать базы данных
{
	for (int i = 0; i < A; i++)
	{
		printf("Код сотрудника: %s\n", ptr_struct[i].cod);
		printf("Должность сотрудника: %s\n", ptr_struct[i].dolgnost);
		printf("Время начала работы (часы и минуты): %02d:%02d\n", ptr_struct[i].startvremy_chas, ptr_struct[i].startvremy_min);
		printf("Продолжительность работы в долях часа: %f\n", (((float)ptr_struct[i].finvremy_chas * 60 + (float)ptr_struct[i].finvremy_min) - ((float)ptr_struct[i].startvremy_chas * 60 + (float)ptr_struct[i].startvremy_min)) / 60);
		printf("Отработано во второй половине дня %d часов %d минут", ptr_struct[i].t2 / 60, ptr_struct[i].t2 % 60);
		puts("----------------------------------------------------");
	}
}

void Sort1(data* ptr_struct, int A) {//Сортировка по продолжительности работы за первую половину дня

	data tmp;

	for (int i = 0; i < A - 1; i++) {
		for (int j = 0; j < A - i - 1; j++)
		{
			if ((720 - (ptr_struct[j].startvremy_chas * 60 + ptr_struct[j].startvremy_min)) < (720 - (ptr_struct[j + 1].startvremy_chas * 60 + ptr_struct[j + 1].startvremy_min)))
			{
				tmp = ptr_struct[j];
				ptr_struct[j] = ptr_struct[j + 1];
				ptr_struct[j + 1] = tmp;
			}
		}
	}
}

void Sort2(data* ptr_struct, int A) {//Сортировка по продолжительности работы за вторую половину дня

	data tmp;
	for (int i = 0; i < A; i++) {
		for (int j = 0; j < A - 1; j++)
		{
			if (ptr_struct[j].t2 > ptr_struct[j+1].t2);
			{
				tmp = ptr_struct[j];
				ptr_struct[j] = ptr_struct[j + 1];
				ptr_struct[j + 1] = tmp;
			}
		}
	}
}




int writefile(data* ptr_struct, int size, char* fileName) {
	FILE* fp;
	if ((fp = fopen(fileName, "w")) == NULL)
	{
		printf("Ошибка открытия файла для записи\n");
		return 0;
	}
	for (int i = 0; i < size; i++) {
		fprintf(fp, "%15s\t%20s\t\t\t %02d:%02d\t\t\t%d\t   %02d:%02d \n", ptr_struct[i].cod, ptr_struct[i].dolgnost, ptr_struct[i].startvremy_chas, ptr_struct[i].startvremy_min, ptr_struct[i].t2, ptr_struct[i].finvremy_chas, ptr_struct[i].finvremy_min);
	}
	fclose(fp);
	printf("Данные успешно записаны в файл!\n");
	return 1;
}

int readfile(data* ptr_struct, int size, char* fileName) {
	FILE* fp;
	char fileLine[100];
	if ((fp = fopen(fileName, "r")) == NULL)
	{
		printf("Произошла ошибка при открытии файла\n");
		return 0;
	}
	printf("Файл успешно открыт!\n");
    
    
	for (int i = 0; i < size; i++) {
	    fscanf(fp, "%15s\t%20s\t\t\t %02d:%02d\t\t\t%d\t   %02d:%02d \n", &ptr_struct[i].cod, &ptr_struct[i].dolgnost, &ptr_struct[i].startvremy_chas, &ptr_struct[i].startvremy_min, &ptr_struct[i].t2, &ptr_struct[i].finvremy_chas, &ptr_struct[i].finvremy_min);
	}
	fclose(fp);
	return(1);
}

void Poisk1(data* ptr_struct, int A, float Kol)//Поиск структуры по работавшим менее заданного количества часов в день
{

	for (int j = 0; j < A; j++)
	{
		if (((((float)(ptr_struct + j)->finvremy_chas * 60 + (float)(ptr_struct + j)->finvremy_min) - ((float)(ptr_struct + j)->startvremy_chas * 60 + (float)(ptr_struct + j)->startvremy_min)) / 60) < Kol)
		{
			print_one_persone(ptr_struct, j);
		}
	}
}

void Poisk2(data* ptr_struct, int A, int Ch1, int Min1, int Ch2, int Min2)//Поиск структуры по работавшим в заданном интервале времени
{
	
	for (int j = 0; j < A; j++)
	{

		if ((((ptr_struct + j)->startvremy_chas > Ch1) || ((ptr_struct + j)->startvremy_chas == Ch1 && (ptr_struct + j)->startvremy_min >= Min1)) && (((ptr_struct + j)->finvremy_chas < Ch2)  || (((ptr_struct + j)->finvremy_chas == Ch2) && (ptr_struct + j)->finvremy_min <= Min2)))
		{
			print_one_persone(ptr_struct, j);
		}
		
	}
}

void print_one_persone(data* ptr_struct, int i) {
    printf("Код сотрудника: %s\n", ptr_struct[i].cod);
	printf("Должность сотрудника: %s\n", ptr_struct[i].dolgnost);
	printf("Время начала работы (часы и минуты): %02d:%02d\n", ptr_struct[i].startvremy_chas, ptr_struct[i].startvremy_min);
	printf("Продолжительность работы в долях часа: %f\n", (((float)ptr_struct[i].finvremy_chas * 60 + (float)ptr_struct[i].finvremy_min) - ((float)ptr_struct[i].startvremy_chas * 60 + (float)ptr_struct[i].startvremy_min)) / 60);
	puts("----------------------------------------------------");
}


